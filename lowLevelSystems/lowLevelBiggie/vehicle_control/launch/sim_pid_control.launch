<?xml version="1.0"?>
<launch>
    <!-- Start wamv_localization -->
    <include file="$(find wamv_gazebo)/launch/localization_example.launch" />
    
    <!-- Publish the static TF Tree -->
    <node pkg="tf_tree" name="tf_tree_sim" type="tf_tree_sim"/>
    <!--<node pkg="tf_tree" name="tf_tree_sim" type="tf_tree_sim" output="screen"/>-->

    <!-- Load ROS params for the entire control system -->
    <!-- Among other things, this should specifiy which controller to use -->
    <rosparam command="load" file="$(find vehicle_control)/config/control.yaml" />

    <!-- Based on the selected controller, load params for the requested control type -->
    <!-- Load ROS params PID control -->
    <rosparam command="load" file="$(find vehicle_control)/config/pid.yaml" />
    <rosparam command="load" file="$(find vehicle_control)/config/sm_sk.yaml" />

    <!-- Run control system -->
    <node pkg="vehicle_control" name="control" type="vehicle_control_dyn"/>
    <!--<node pkg="vehicle_control" name="control_sk" type="sm_sk_control" /> -->
    <node pkg="vehicle_control" name="control_sk" type="vehicle_skcontrol_dyn"/>
    <!--<node pkg="vehicle_control" name="control" type="vehicle_control_dyn" output="screen"/>-->
     <!--<node pkg="vehicle_control" name="control_sk" type="sm_sk_control" output="screen"/> -->
    <!--<node pkg="vehicle_control" name="control_sk" type="vehicle_skcontrol_dyn" output="screen"/>-->

    <!-- Run allocation -->
    <node pkg="qp_allocation" name="qp_allocation" type="qp_allocation.py"/>
    <!-- <node pkg="vehicle_allocation" name="allocation" type="vehicle_allocation"/> -->
    <!--<node pkg="qp_allocation" name="qp_allocation" type="qp_allocation.py" output="screen"/>-->
    <!-- <node pkg="vehicle_allocation" name="allocation" type="vehicle_allocation" output="screen"/> -->

    <!-- Start Simulated Drivers and State Accumulator -->
    <include file="$(find vehicle_state)/launch/sim_vehicle_state.launch" />

    <!-- Run RViz -->
    <arg name="rviz_config" default="$(find wamv_gazebo)/config/rviz_armando.rviz" />
    <!--<node pkg="rviz" type="rviz" name="wamv_visualization" args="-d $(arg rviz_config)" /> -->
    
    <!-- Run lidar geofence -->
    <node pkg="lidar_geofence" name="lidar_geofence" type="lidar_geofence.py"/>
    <!--<node pkg="lidar_geofence" name="lidar_geofence" type="lidar_geofence.py" output="screen"/>-->
    
    <!-- Run PC Collapser -->
    <!--<node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">-->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
      <remap from="cloud_in" to="/lidar_fenced"/>
      <!--<remap from="cloud_in" to="/wamv/sensors/lidars/lidar_wamv/points"/>-->
    <remap from="scan" to="scan_converter"/>
    <rosparam>
        target_frame: wamv/base_link
        transform_tolerance: 0.01 
        min_height: 0.01
        max_height: 3.0
        angle_min: -3.1415
        angle_max: 3.1415
        angle_increment: 0.01
        scan_time: 0.1
        range_min: 0.9
        range_max: 100
        use_inf: true
        concurrency_level: 0
    </rosparam>
    </node>
  
    <!-- Run Armando's Suite -->
    <include file="$(find wamv_navigation)/launch/vehicle_sim.launch" />

    <node pkg="high_to_low" type="high_to_low" name="waypoints_to_waypoint"/> 
    <!--<node pkg="high_to_low" type="high_to_low" name="waypoints_to_waypoint" output="screen"/> -->

    <node pkg="the_planner" type="planner" name="planner" output="screen">
        <rosparam param="mission_string">[tester]</rosparam>
        <rosparam file="$(find the_planner)/yaml/missions.yaml" param = "missions" command="load" ></rosparam>
    </node>
    
    <!--Launch the vision package-->
    <!--<include file="$(find usv_ahc_py)/launch/vision.launch" />-->
    <!--Launch yolo out here-->
    <!--<include file="$(find yolo_detection)/launch/yolov3_buoys.launch" />-->
    <!--Launch pca fancy pants-->
    <!--<node pkg="lidar_docking" name="lidar_docking" type="get_costmap.py"/>-->

</launch>
