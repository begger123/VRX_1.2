<launch>
    <rosparam command="load" file="$(find rgbd_fusion)/config/config.yaml" />
    <rosparam command="load" file="$(find color_classification)/config/newRecord.yaml" />
    <param name="path" value="$(find color_classification)" />
    <node name="save_data" pkg="classifier" type="save_data_node" output="screen" />

    <!-- Run PC Collapser -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">
      <remap from="cloud_in" to="/wamv/sensors/lidars/lidar_wamv/points"/>
    <remap from="scan" to="scan_converter"/>
    <rosparam>
        target_frame: wamv/base_link
        transform_tolerance: 0.01 
        min_height: 0.01
        max_height: 3.0
        angle_min: -3.1415
        angle_max: 3.1415
        angle_increment: 0.01
        scan_time: 0.1
        range_min: 0.9
        range_max: 100
        use_inf: true
        concurrency_level: 0
    </rosparam>
    </node>

    <!-- Start wamv_localization -->
    <include file="$(find wamv_gazebo)/launch/localization_example.launch" />
    
    <!-- Publish the static TF Tree -->
    <node pkg="tf_tree" name="tf_tree_sim" type="tf_tree_sim"/>
    <!--<node pkg="tf_tree" name="tf_tree_sim" type="tf_tree_sim" output="screen"/>-->

    <!-- Run RViz -->
    <arg name="rviz_config" default="$(find wamv_gazebo)/config/rviz_vision.rviz" />
    <node pkg="rviz" type="rviz" name="wamv_visualization" args="-d $(arg rviz_config)" />

    <!-- Run lidar geofence -->
    <node pkg="lidar_geofence" name="lidar_geofence" type="lidar_geofence.py"/>
    <!--<node pkg="lidar_geofence" name="lidar_geofence" type="lidar_geofence.py" output="screen"/>-->

    <!-- Start Simulated Drivers and State Accumulator -->
    <include file="$(find vehicle_state)/launch/sim_vehicle_state.launch" />

    <node pkg="high_to_low" type="high_to_low" name="waypoints_to_waypoint"/> 
    <!--<node pkg="high_to_low" type="high_to_low" name="waypoints_to_waypoint" output="screen"/> -->

    <node pkg="the_planner" type="planner" name="planner" output="screen">
        <rosparam param="mission_string">[tester]</rosparam>
        <rosparam file="$(find the_planner)/yaml/missions.yaml" param = "missions" command="load" ></rosparam>
    </node>

</launch>
